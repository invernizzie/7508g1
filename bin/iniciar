#! /bin/bash 

# Codigos de error
EEXISTEENTORNO=14
ENOINSTALADO=15

# Funcion para imprimir por consola y al log
# Uso: imprimir mensaje [tipo]
imprimir() {
	echo $1
	if [ $ENTORNO_INICIALIZADO ]; then
		glog "$INICIAR" $2 "$1"
	fi
}

# Variables que deben estar definidas en practico.conf
VARNECESARIAS=( \
[0]=BINDIR \
[1]=LOGDIR \
[2]=DATADIR \
[3]=MAXLOG \
[4]=GRUPO )

# El entorno puede inicializarse una sola vez en cada sesion de bash
if [ $ENTORNO_INICIALIZADO ]; then

	imprimir "Invocacion con el entorno ya inicializado" W

	echo "Valores de las variables de entorno indispensables"
	for VAR in ${VARNECESARIAS[*]}
	do
		echo \$$VAR = $(eval echo \$$VAR)
	done
	echo \$ARCHCONF = $ARCHCONF
	echo \$CANLOOP = $CANLOOP
	echo \$TESPERA = $TESPERA
	
	echo
	
	# Se muestra el PID de detectar, si es que esta corriendo
	DETPID=$(expr "$(ps | grep detectar)" : '\ \([^\ ]*\)\ .*')
	if [ ! -z "$DETPID" ]; then
		imprimir "PID de detectar: $DETPID"
	fi
	
	return $EEXISTEENTORNO
fi

# la ubicacion de practico.conf relativa a iniciar es fija
export ARCHCONF=../conf/practico.conf

# El archivo de configuracion practico.conf debe existir
if [ ! -e $ARCHCONF ] || [ -d $ARCHCONF ]; then
	imprimir "Archivo de configuracion $ARCHCONF inexistente, instalacion corrupta"
	return $ENOINSTALADO
fi

# Se exportan las variables del archivo de configuracion
LINEAS=$(wc -l <$ARCHCONF)
(( LINEAS += 1 ))
CUENTA=0
{ # Se procesa el archivo de configuracion linea por linea
while [ $CUENTA -lt $LINEAS ]
do
	(( CUENTA += 1))
	
	# Se lee linea por linea el archivo de configuracion
	read LINEA
	# Si la linea esta vacia o comentada se saltea
	if [ ${#LINEA} -lt 1 -o "${LINEA:0:1}" = "#" ]; then
		(( REGISTROS -= 1 ))
		continue
	fi
	
	# Se exporta la variable definida en la linea
	echo $LINEA	
	export $LINEA 2>/dev/null
	if [ ! $? -eq 0 ]; then
		imprimir "Error de sintaxis en $ARCHCONF en la linea $CUENTA"
	fi
done
} <$ARCHCONF

# Se chequea que el archivo practico.conf este completo
for VAR in ${VARNECESARIAS[*]}
do
	# Referencia indirecta a la variable cuyo nombre es $VAR
	if [ -z $(eval echo \$$VAR) ]; then
		imprimir "No existe la de entorno $VAR"	
	fi
done

# Se agrega el directorio bin al PATH para poder ejecutar las demas funciones
export PATH=$PATH:$BINDIR
# Se exporta esta variable para poder invocar a glog. Si la ejecucion
#+de iniciar es erronea ENTORNO_INICIALIZADO se "unsetea".
export ENTORNO_INICIALIZADO=1

imprimir "Inicializando entorno"

# Se verifica la instalacion: presencia de tablas y ejecutables
# Array de nombres de archivos indispensables. Ejecutables:
NECESARIOS=( [0]="$GRUPO/bin/mover" \
[1]="$GRUPO/bin/glog" \
[2]="$GRUPO/bin/vlog" \
[3]="$GRUPO/bin/iniciar" \
[4]="$GRUPO/bin/detectar" \
[5]="$GRUPO/bin/interprete" \
[6]="$GRUPO/bin/reporte" \
[7]="$GRUPO/conf/p-s.tab" \
[8]="$GRUPO/conf/T1.tab" \
[9]="$GRUPO/conf/T2.tab" \
[10]="$GRUPO/conf/practico.conf" \
)

unset NOINST
# ${!a[*]} expande a todos los índices del array a.
# No se puede usar for arch in ${a[*]}, que directamente iteraría en todos los 
# elementos del array porque los elementos pueden contener espacios.
for i in ${!NECESARIOS[*]}
do
	if [ ! -e "${NECESARIOS[i]}" ]; then
		imprimir "El archivo indispensable ${NECESARIOS[i]} no esta presente" SE
		NOINST=1
	fi
done

if [ $NOINST ]; then
	imprimir "Imposible iniciar el entorno: Instalacion fallida o corrupta" SE
	unset ENTORNO_INICIALIZADO
	return $ENOINSTALADO
fi

# Se solicita por pantalla la cantidad de ciclos de detectar
while [[ "$CANLOOP" -lt 1 ]] 2>/dev/null
do
	echo -n "Cantidad de Ciclos de DETECTAR? (100 ciclos) "
	read CANLOOP
	
	if [ ${#CANLOOP} -eq 0 ]; then
		CANLOOP=100
	fi
	
	# Workaround para obligar a que sea un entero
	let CANLOOP="$CANLOOP"*1 2>/dev/null
done

# Se solicita por pantalla el tiempo de espera por ciclo de detectar
while [[ "$TESPERA" -lt 1 ]] 2>/dev/null
do
	echo -n "Tiempo de espera entre ciclos? (1 minuto) "
	read TESPERA
	
	if [ ${#TESPERA} -eq 0 ]; then
		TESPERA=1
	fi
	
	# Workaround para obligar a que sea un entero
	let TESPERA="$TESPERA"*1 2>/dev/null
done

# Se exportan las variables necesarias para ejecutar detectar
export CANLOOP
export TESPERA

# Se da la opcion de iniciar detectar si no se esta ejecutando
if [ $(ps -e | grep detectar | wc -l) -eq 0 ]; then
	while [[ "$OPCDETECTAR" != [snSN] ]]
	do
		echo -n "¿Desea efectuar la activacion de DETECTAR? (S/N) "
		read OPCDETECTAR
	done
	
	if [[ "$OPCDETECTAR" = [sS] ]]; then
		detectar >/dev/null v&
		imprimir "Demonio corriendo bajo el no.: $!"
	else
		echo "Para realizar la activacion del comando DETECTAR en segundo plano"
		echo "debe ingresar \"detectar &\" en una consola con el entorno iniciado."
	fi
fi

imprimir "Entorno inicializado correctamente, iniciar terminado"
