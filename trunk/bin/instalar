#!/bin/bash

# Instalador del Trabajo Practico de Sistemas Operativos
# 
# Se presupone que junto con este archivo, estan descomprimidos
# Los archivos que corresponden a los comandos, se encuentran en
# la carpeta ./inst/bin. Se asume que se intenta instalar todos los
# comandos que se encuentran creados alli.

#TODO
# 1) Hacer un test de instalacion en un lugar en el que ya hubo una
# 2) Terminar el codigo para que cree el archivo de configuracion


# Esta funcion determina si existe un componente en el arreglo de componentes
# instalados.
function elementExists() 
{
	if [ -z "$1" ]; then
		echo "-1"
		return 1
	fi

	for (( i=0; i<${#listaComponentesInstalados[@]}; i++));
	do
		if [ ${listaComponentesInstalados[i]} == $1 ]; then
			echo $i
			return 0
		fi
	done

	echo "-1"
	return 1
}

# Defino la variable en la que se va a almacena el directorio
# de instalacion y ejecutacion
cd ..
grupo="$( pwd )"
cd inst

# Defino la variable en la que almaceno la ubicacion del archivo de logs
# para la instalacion
LOGINSTALL="$grupo/log/instalar.log"
if [ ! -d "$grupo/log" ]; then
	mkdir "$grupo/log"
fi

### Paso 1 ###
# Registro el inicio de la instalacion
echo "Inicio de instalacion" > "$LOGINSTALL"

### Paso 2 ###
# Muestro y grabo la ubicacion del archivo de logs
echo "Log de la instalacion: $LOGINSTALL" | tee -a "$LOGINSTALL"

### Paso 3 ###
# Muestro y grabo la ubicacion del directorio de instalacion
echo "Directorio de instalacion: $grupo/inst" | tee -a "$LOGINSTALL"

### Paso 4 ###
# Muestro y grabo la ubicacion del directorio de los parametros de configuracion
echo "Directorio de configuracion: $grupo/conf" | tee -a "$LOGINSTALL"

### Paso 5 ###
# Al encontrar el archivo, busco los componentes que se encuentran instalados.
# Se arma una lista con todos los componentes a instalar a partir de lo que se
# encuentra en el directorio de instalacion y se hace una comparacion para determinar
# los faltantes.

# Construyo la lista de los componentes que tengo que instalar
listaComponentesInstalar=( $(ls "$grupo/inst/bin") )

# Construyo una lista con los mismos componentes, pero que va a tener
# la lista final de componentes a instalar
listaComponentesInstalarFinal=( $(ls "$grupo/inst/bin") )

CONFFILE="$grupo/conf/practico.conf"

# Se detecta si alguno de los componentes o ninguno ha sido instalado
if [ -e "$CONFFILE" ]; then

  # Renombro el archivo de configuracion existente, para que no se elimine en la creacion
  # del nuevo.
  mv "$CONFFILE" "$CONFFILE.old"

	# Construyo la lista de los componentes que tengo instalados, y otras dos
	# con los datos que tengo que mostrar.
	grep -e COMAND -e BINDIR -e USERID -e FECINS -e LOGDIR -e '^$' "$CONFFILE.old" > "$CONFFILE.temp"
	listaComponentesInstalados=( $(grep "COMAND =" "$CONFFILE.temp" | sed 's/COMAND =//g') )
	listaUsuariosInstalados=( $(grep "USERID =" "$CONFFILE.temp" | sed 's/USERID =//g') )
	listaFechasInstalados=( $(grep "FECINS =" "$CONFFILE.temp" | sed 's/FECINS =//g') )


	# Determino y muestro la lista de componentes instalados. Recorro la
	# lista de los componentes que tengo que instalar, y chequeo si se
	# encuentran instalados. En ese caso, muestro su informacion
	#for componente in ${listaComponentesInstalar[@]}; do
  for (( i=(${#listaComponentesInstalar[@]}-1); i>=0; i-- )); do
    componente=${listaComponentesInstalar[$i]}
		comparacion=$(elementExists $componente)
		if [ $comparacion != "-1" ]; then
			unset listaComponentesInstalarFinal[$i]
			echo "Comando $componente instalado el ${listaFechasInstalados[$comparacion]} por ${listaUsuariosInstalados[$comparacion]}"
		fi
	done

fi

# Me fijo si hay que instalar algun componente. En caso de que no haya componentes
# para instalar, salgo de la instalacion
if [ ${#listaComponentesInstalarFinal[@]} -eq 0 ]; then
	echo 	"Todos los componentes necesarios, se encuentran instalados. La instalacion finalizara"
	exit 0
fi

if [ ${#listaComponentesInstalarFinal[@]} -eq ${#listaComponentesInstalar[@]} ]; then
	echo 	"Se instalaran todos los componentes"
else
	# Muestro la lista de componentes que se instalaran, en caso de que
	# los existentes no sean instalados.
	unset $componente
	echo "Componentes a instalar"
	for componente in ${listaComponentesInstalarFinal[@]}; do
		echo "	$componente"
	done
fi

### Paso 6 ###
echo -e "
***************************************************\n
*       Proceso de Instalación de 'Practico'      *\n
*          Copyright TPSistemasOp (c)2009         *\n
***************************************************\n
A T E N C I O N: Al instalar Practico UD. expresa aceptar los términos y\n
Condiciones del 'ACUERDO DE LICENCIA DE SOFTWARE' incluido en este paquete.\n"
while [ "$REPLY" != "Si" -a "$REPLY" != "No" ]; do
	read -p "Acepta? (Si–No)"
done

if [ $REPLY == "No" ]; then
	echo "Instalacion Cancelada" | tee -a "$LOGINSTALL"
	exit 0
fi


# Defino los valores por defecto de las variables globales. En caso de ser modificados
# y luego cancelada la instalacion, se mantienen los valores cargados
BINDIR="$grupo/bin"
DATADIR="$grupo/data"
LOGDIR="$grupo/log"

REPLY="No"
while [ "$REPLY" == "No" ]; do

	# Me fijo la version de PERL. Para que sea valido, tiene que ser mayor que la 5.
	# Para simplificar, uso el valor de la revision para comparar y almaceno la version

	### Paso 7 ###
	version=$( perl -V:revision | cut -f2 -d"'" )
	ERRORPERL=1
	LEASTVERSION=5
	if [ $version -lt $LEASTVERSION ]; then
		echo -e "Atencion! Esta instalacion solo puede ejecutada si Perl 5 o superior esta instalado.\nEfectúe la instalación de Perl y reinicie el proceso de instalación." | tee -a "$LOGINSTALL"
		exit $ERRORPERL
	fi
	PERLVER=$( perl -V:version )

	### Paso 8 ###
	# Defino el directorio de los ejecutablaes
	read -p "Nombre del directorio de ejecutables: ($BINDIR) "
	[ "$REPLY" != "" ] && BINDIR="$REPLY"

	### Paso 9 ###
	# Defino el directorio de los datos
	read -p "Nombre del directorio de datos: ($DATADIR) "
	[ "$REPLY" != "" ] && DATADIR="$REPLY"

	### Paso 10 ###
	# Guardo el espacio disponible
	espacio=$( df -h "$grupo" | awk '{print $4}' | tail -n 1 )
	echo "Espacio disponible en $DATADIR: $espacio" | tee -a "$LOGINSTALL"
	DATASIZE=${espacio[@]:0:(${#espacio}-1)}
	USIZE=${espacio[@]:(${#espacio}-1)}
	
	# Le pregunto al usuario si quiere proseguir con la instalacion
	while [ "$REPLY" != "Si" -a "$REPLY" != "No" ]; do
		read -p "¿Desea continuar? (Si-No) "
	done

	# En caso de no recibir la respuesta esperada, salgo de la instalacion
	if [ "$REPLY" == "No" ]; then
		echo "Instalacion Cancelada" | tee -a "$LOGINSTALL"
		exit 0
	fi

	### Paso 11 ###
	# Defino el directorio de los logs
	read -p "Nombre del directorio de log: ($LOGDIR) "
	[ "$REPLY" != "" ] && LOGDIR="$REPLY"

	### Paso 12 ###
	# Defino el tamaño maximo que puede tener ocupar el log. 1% del espacio disponible
	if [ $DATASIZE -ge 100 ]; then
		MAXLOGPOSSIBLE=$( echo "$DATASIZE / 100" | bc -l )
	else
		MAXLOGPOSSIBLE=$( echo "$DATASIZE * 10" | bc -l )
		if [ $USIZE == "T" ]; then
			USIZE="G"
		else
			if [ $USIZE == "G" ]; then
				USIZE="M"
			else
				if [ $USIZE == "M" ]; then
					USIZE="K"
				else
					USIZE="B"
				fi
			fi
		fi
	fi

	# Se introduce el tamaño maximo del log
	REPLY=0
	while [ `expr $REPLY \> $MAXLOGPOSSIBLE` == "1" -o `expr $REPLY = 0` == "1" ]; do
		read -p "Espacio máximo para archivos de log? ($MAXLOGPOSSIBLE $USIZE) "
		[ "$REPLY" == "" ] && REPLY="$MAXLOGPOSSIBLE"
	done
	MAXLOG=$REPLY


	### Paso 13 ###
	# Imprimo los parametros
	echo "PARÁMETROS DE INSTALACION DE PRACTICO"
	echo "Versión de Perl:   $PERLVER"
	echo "Nombre del directorio de instalación:   $grupo/inst"
	echo "Nombre del directorio de configuración: $grupo/conf"
	echo "Nombre del directorio de ejecutables:   $BINDIR"
	echo "Nombre del directorio de datos:         $DATADIR"
	echo "Nombre del directorio de logs:          $LOGDIR"
	echo "Espacio máximo para archivos de log:    $MAXLOG $USIZE"

	### Paso 14 ###
	while [ "$REPLY" != "Si" -a "$REPLY" != "No" ]; do
		read -p "¿Continuar instalación? (Si-No) "
	done
done

### Paso 15 ###
# Creo la estructura de los directorios
echo "Creando Estructura de Directorio..."
if [ ! -d "$BINDIR" ]; then
	mkdir "$BINDIR"
fi
if [ ! -d "$DATADIR" ]; then
	mkdir "$DATADIR"
fi
# En caso de que no se haya cambiado el directorio de los logs
if [ ! -d "$LOGDIR" ]; then
	mkdir "$LOGDIR"
fi
if [ ! -d "$grupo/conf" ]; then
	mkdir "$grupo/conf"
fi


### Paso 16 y 17 ###
# Creo el archivo de configuracion y guardo los elementos de las primeras 7 lineas
echo "INSTDIR=/inst" > "$CONFFILE"
echo "FILECONF=/conf/practico.conf" >> "$CONFFILE"
echo "LOGFILE=/log/instalar.log" >> "$CONFFILE"
echo "DATADIR=$DATADIR" >> "$CONFFILE"
echo "PERLVER=$PERLVER" >> "$CONFFILE"
echo "MAXLOG=$MAXLOG" >> "$CONFFILE"
echo "USIZE=$USIZE" >> "$CONFFILE"

# Copio los registros correspondientes a las instalaciones anteriores, si las hay
if [ -e "$CONFFILE.temp" ]; then
  cat "$CONFFILE.temp" | tee -a "$CONFFILE"
  rm "$CONFFILE.old"
  rm "$CONFFILE.temp"
else
  # Dejo las lineas 8 y 9 reservadas
  echo -e "\n" >> "$CONFFILE"
fi

USERNAME=$( echo `id -un` )
DATE=$(date '+%Y/%m/%d')
# Copio los componentes que no estan instalados y los agrego al archivo de configuracion
for componente in ${listaComponentesInstalarFinal[@]}; do
  echo "Instalando $componente"
	cp "$grupo/inst/bin/$componente" "$BINDIR/$componente"
  chmod +x "$BINDIR/$componente"
  echo "COMAND = $componente" >> "$CONFFILE"
  echo "BINDIR = $BINDIR" >> "$CONFFILE"
  echo "USERID = $USERNAME" >> "$CONFFILE"
  echo "FECINS = $DATE" >> "$CONFFILE"
  echo -e "LOGDIR = $LOGDIR\n" >> "$CONFFILE"
done

# Agrego el valor de la variable grupo
echo "GRUPO = $grupo" >> "$CONFFILE"

# Copio los archivos de datos. Copio todos indiscriminadamente a la nueva carpeta.
# Si existen duplicados, se reemplazan por la version que se esta instalando.
cp -r "$grupo/inst/data/" "$DATADIR/"

### Paso 18 ###
### Paso 19 ###
### Paso 20 ###
echo "Fin de Ejecucion" | tee -a "$LOGINSTALL"
