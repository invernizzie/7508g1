#! /bin/bash 

# Codigos de error
EEXISTEENTORNO=14
ENOINSTALADO=15

# Funcion para imprimir por consola y al log
# Uso: imprimir mensaje [tipo]
imprimir() {
    echo $1
    if [ $ENTORNO_INICIALIZADO ]; then
        glog iniciar $2 "$1"
    fi
}

VARNECESARIAS=( \
[0]=CONFFILE
[1]=DATADIR
[2]=MAXLOG
[3]=USIZE )

# El entorno puede inicializarse una sola vez en cada sesion de bash
if [ $ENTORNO_INICIALIZADO ]; then

    imprimir "Invocacion con el entorno ya inicializado" W

    echo "Valores de las variables de entorno indispensables"
    for VAR in ${VARNECESARIAS[*]}
    do
        echo \$$VAR = $(eval echo \$$VAR)
    done
    echo \$FILECONF = $FILECONF
    echo \$CANLOOP = $CANLOOP
    echo \$TESPERA = $TESPERA
    
    echo
    
    # Se muestra el PID de detectar, si es que esta corriendo
    DETPID=$(expr "$(ps | grep detectar)" : '\ \([^\ ]*\)\ .*')
    if [ ! -z "$DETPID" ]; then
        imprimir "PID de detectar: $DETPID"
    fi
    
    return $EEXISTEENTORNO
fi

CONFFILE=../conf/practico.conf
# Si la instalacion no reemplaza la siguiente linea, la anterior 
#+se encarga de que exista la variable CONFFILE. Util para pruebas.

#### NO REMOVER. Linea reservada para asignacion de archivo de configuracion a la variable. ####

# la ubicacion de practico.conf relativa a iniciar es fija
#export CONFFILE=../conf/practico.conf

# El archivo de configuracion practico.conf debe existir
if [ ! -e $CONFFILE ] || [ -d $CONFFILE ]; then
    imprimir "Archivo de configuracion $CONFFILE inexistente, instalacion corrupta"
    return $ENOINSTALADO
fi

# Se exportan las variables del archivo de configuracion
LINEAS=$(wc -l <$CONFFILE)
(( LINEAS += 1 ))
CUENTA=0
{ # Se procesa el archivo de configuracion linea por linea
while [ $CUENTA -lt $LINEAS ]
do
    (( CUENTA += 1))
    
    # Se lee linea por linea el archivo de configuracion
    read LINEA
    # Si la linea esta vacia o comentada se saltea
    if [ ${#LINEA} -lt 1 -o "${LINEA:0:1}" = "#" ]; then
        continue
    fi
    
    # Si se trata de las variables de un comando se las exporta sufijadas
    if [ ${LINEA:0:7} = "COMAND=" ]; then
        # Los 3 primeros caracateres del nombre del
        #+comando se usan como sufijo de sus variables.
        SUFIJO=${LINEA:7:3}
        
        # Cada comando tiene 4 lineas aparte de su nombre
        for i in 1 2 3 4
        do
            read LINEA
            # Se ve en el enunciado que los nombres tienen 6 caracteres
            NOMBRE=$SUFIJO${LINEA:0:6}
            VALOR=${LINEA:7}
            export $NOMBRE=$VALOR
        done
    
    # Si no, se exporta la variable definida en la linea
    else
        export "$LINEA" #2>/dev/null
        if [ ! $? -eq 0 ]; then
            imprimir "Error de sintaxis en $CONFFILE en la linea $CUENTA"
        fi
    fi
done
} <$CONFFILE

# Se chequea que el archivo practico.conf este completo
for VAR in ${VARNECESARIAS[*]}
do
    # Referencia indirecta a la variable cuyo nombre es $VAR
    if [ -z "$(eval echo \$$VAR)" ]; then
        imprimir "No existe la variable de entorno $VAR, error en $CONFFILE"
    fi
done

# Necesario para el correcto funcionamiento de glog
export LOGDIR=$iniLOGDIR

# Se agregan los directorios bin al PATH para poder ejecutar las demas funciones
PATH="$PATH:$detBINDIR:$gloBINDIR:$iniBINDIR:$insBINDIR"
PATH="$PATH:$intBINDIR:$movBINDIR:$repBINDIR:$vloBINDIR"
export PATH
BINDIR=$iniBINDIR
# Se exporta esta variable para poder invocar a glog. Si la ejecucion
#+de iniciar es erronea ENTORNO_INICIALIZADO se "unsetea".
export ENTORNO_INICIALIZADO=1

imprimir "Inicializando entorno"

# Se verifica la instalacion: presencia de tablas y ejecutables
# Array de nombres de archivos indispensables.
NECESARIOS=( \
[0]="$movBINDIR/mover" \
[1]="$gloBINDIR/glog" \
[2]="$vloBINDIR/vlog" \
[3]="$iniBINDIR/iniciar" \
[4]="$detBINDIR/detectar" \
[5]="$intBINDIR/interprete" \
[6]="$repBINDIR/reporte" \
[7]="$GRUPO/conf/p-s.tab" \
[8]="$GRUPO/conf/T1.tab" \
[9]="$GRUPO/conf/T2.tab" )

unset NOINST
# ${!a[*]} expande a todos los índices del array a.
# No se puede usar for arch in ${a[*]}, que directamente iteraría en todos los 
# elementos del array porque los elementos pueden contener espacios.
for i in ${!NECESARIOS[*]}
do
    if [ ! -e "${NECESARIOS[i]}" ]; then
        imprimir "El archivo indispensable ${NECESARIOS[i]} no esta presente" SE
        NOINST=1
    fi
done

if [ $NOINST ]; then
    imprimir "Imposible iniciar el entorno: Instalacion fallida o corrupta" SE
    unset ENTORNO_INICIALIZADO
    return $ENOINSTALADO
fi

# Se solicita por pantalla la cantidad de ciclos de detectar
while [[ "$CANLOOP" -lt 1 ]] 2>/dev/null
do
    echo -n "Cantidad de Ciclos de DETECTAR? (100 ciclos) "
    read CANLOOP
    
    if [ ${#CANLOOP} -eq 0 ]; then
        CANLOOP=100
    fi
    
    # Workaround para obligar a que sea un entero
    let CANLOOP="$CANLOOP"*1 2>/dev/null
done

# Se solicita por pantalla el tiempo de espera por ciclo de detectar
while [[ "$TESPERA" -lt 1 ]] 2>/dev/null
do
    echo -n "Tiempo de espera entre ciclos? (1 minuto) "
    read TESPERA
    
    if [ ${#TESPERA} -eq 0 ]; then
        TESPERA=1
    fi
    
    # Workaround para obligar a que sea un entero
    let TESPERA="$TESPERA"*1 2>/dev/null
done

# Se cambia la unidad de TESPERA de minutos a segundos
(( TESPERA *= 60 ))

# Se exportan las variables necesarias para ejecutar detectar
export CANLOOP
export TESPERA

# Se da la opcion de iniciar detectar si no se esta ejecutando
if [ $(ps -e | grep detectar | wc -l) -eq 0 ]; then
    while [[ "$OPCDETECTAR" != [snSN] ]]
    do
        echo -n "¿Desea efectuar la activacion de DETECTAR? (S/N) "
        read OPCDETECTAR
    done
    
    if [[ "$OPCDETECTAR" = [sS] ]]; then
        detectar >/dev/null v&
        imprimir "Demonio corriendo bajo el no.: $!"
    else
        echo "Para realizar la activacion del comando DETECTAR en segundo plano"
        echo "debe ingresar \"detectar &\" en una consola con el entorno iniciado."
    fi
fi

# Botonea acerca de los T0D0s sin hacer.
for arch in $(ls "$BINDIR")
do
    PARA=TO
    HACER=DO
    POR_HACER=$(grep $PARA$HACER -n <"$BINDIR/$arch");
    if [ "$POR_HACER" ]
    then
        echo "El archivo $arch tiene cosas por hacer!"
        echo "$POR_HACER"
    fi
done


imprimir "Entorno inicializado correctamente, iniciar terminado"
